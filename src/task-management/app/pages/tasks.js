import Head from 'next/head'
import { useState, useEffect, useRef } from 'react';
import { useQuery } from 'react-query'

function useSession() {
  const [session, setSession] = useState(null);

  useEffect(() => {
    fetch('http://localhost:3002/api/auth/session', { credentials: 'include' }).then(r => r.json()).then(setSession);

    return () => { };
  }, []);

  return session;
}

export default function Home() {
  const session = useSession();
  const { data } = useQuery('tasks');

  const taskTitleRef = useRef(null);

  useEffect(() => {
    taskTitleRef.current?.focus();
  }, []);

  const tasks = data?.tasks;


  return (
    <div style={{ margin: '4rem' }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Task management dashboard</h1>
      <div>
        {session?.user ? <p>Session: {JSON.stringify(session)}</p> : <p>Anonymous</p>}
        {session?.user ? <a href="http://localhost:3002">Profile</a> : <a href="http://localhost:3002/api/auth/signin">Go to SSO</a>}
      </div>

      {session?.user &&
        <main>

          <form action="/api/tasks" method="post">
            <label htmlFor="title">Title:</label>
            <input ref={taskTitleRef} type="text" id="title" name="title" />
            <button type="submit">Add task</button>
          </form>
          <br />
          <button onClick={() => fetch(`/api/tasks/shuffleOpen`, { method: 'post' })}>Shuffle</button>
          List:

          <table>
            <thead>
              <tr>
                <th>Title</th>
                <th>Assigned to</th>
                <th>Status</th>
                <th />
              </tr>
            </thead>
            <tbody>
              {tasks?.map(task => <tr key={task.publicId}>
                <td>{task.title}</td>
                <td>{task.assignee.name}</td>
                <td>{task.isCompleted ? 'Completed' : 'Open'}</td>
                <td>{task.isCompleted ? null : <button onClick={() => fetch(`/api/tasks/${task.publicId}/complete`, { method: 'post' })}>Complete</button>}</td>
              </tr>)}
            </tbody>
          </table>
        </main>}
    </div>
  )
}
